// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

// Code generated by x-pack/dev-tools/cmd/buildspec/buildspec.go - DO NOT EDIT.

package program

import (
	"strings"

	"github.com/elastic/beats/v7/x-pack/elastic-agent/pkg/packer"
)

var Supported []Spec
var SupportedMap map[string]Spec

func init() {
	// Packed Files
	// spec/endpoint.yml
	// spec/filebeat.yml
	// spec/heartbeat.yml
	// spec/metricbeat.yml
	// spec/osquerybeat.yml
	unpacked := packer.MustUnpack("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")
	SupportedMap = make(map[string]Spec)

	for f, v := range unpacked {
		s, err := NewSpecFromBytes(v)
		if err != nil {
			panic("Cannot read spec from " + f)
		}
		Supported = append(Supported, s)
		SupportedMap[strings.ToLower(s.Cmd)] = s
	}
}
